<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>首页 on James Yeung</title>
    <link>/</link>
    <description>Recent content in 首页 on James Yeung</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy; 2021 &lt;a href=&#34;https://jamesyeung.cn/&#34;&gt;James Yeung&lt;/a&gt;
</copyright><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Blazor 本地化之共享资源与局部刷新</title>
      <link>/posts/blazor-localization-shared-resource/</link>
      <pubDate>Tue, 13 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>/posts/blazor-localization-shared-resource/</guid>
      <description>本文参考 (Shared resources - ASP.NET Core Blazor globalization and localization)[https://learn.microsoft.com/en-us/aspnet/core/blazor/globalization-localization?view=aspnetcore-8.0#shared-resources] 注册本地化服务 在 Program.cs 中注册本地化服务： builder.Services.AddLocalization(); 画重点：共享资源是通过一个空类（dummy class）来定位，不需要设置 ResourcesPath 的。 添加空类</description>
    </item>
    
    <item>
      <title>Blazor 应用内局部刷新</title>
      <link>/posts/blazor-reload-partial/</link>
      <pubDate>Mon, 12 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>/posts/blazor-reload-partial/</guid>
      <description>在大多数企业应用中，都需要页面刷新的功能。因为用户想获取最新数据，但页面上暂时没实现数据刷新功能，所以需要手动刷新页面。但又不想重新从服务器加载，那速</description>
    </item>
    
    <item>
      <title>Blazor 标签页简化版实现</title>
      <link>/posts/blazor-simple-reuse-tabs/</link>
      <pubDate>Mon, 12 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>/posts/blazor-simple-reuse-tabs/</guid>
      <description>核心组件，只渲染一次ChildContent，子内容不再渲染，则这个组件实例就可以达到劫持子内容的效果。 public class KeepAlive : IComponent { private RenderHandle _renderHandle; private bool _rendered = false; [Parameter] public RenderFragment? ChildContent { get; set; } public</description>
    </item>
    
    <item>
      <title>解决 Blazor 中因标签换行导致的行内元素空隙问题</title>
      <link>/posts/resolves-width-issues-in-blazor-caused-by-element-wrapping/</link>
      <pubDate>Sun, 06 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/resolves-width-issues-in-blazor-caused-by-element-wrapping/</guid>
      <description>实践过不同前端框架的朋友应该都知道，对于同一个样式，在不同框架上的表现都会有不同，时时需要做“适配”，在 Blazor 上也不例外。</description>
    </item>
    
    <item>
      <title>跟进 .NET 8 Blazor 之 ReuseTabs 支持 Query 属性绑定</title>
      <link>/posts/ant-blazor-reusetabs-supports-supply-parameter-form-query/</link>
      <pubDate>Sat, 29 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/ant-blazor-reusetabs-supports-supply-parameter-form-query/</guid>
      <description>ASP.NET 团队在 .NET 8 继续全力投入 Blazor，为 Blazor 带来了非常多的新特性，AntDesign Blazor也会继续佛系跟进。本篇主要介绍第一个在AntDesign Blazor 上应用的新特性，也就是 ReuseTabs 自 2021 年发布两年后，仍然未支持的 Query String 属性绑定功能。</description>
    </item>
    
    <item>
      <title>如何无需 Dockerfile 直接发布 .NET 7 应用到 Docker</title>
      <link>/posts/publish-net-apps-to-docker/</link>
      <pubDate>Fri, 09 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/publish-net-apps-to-docker/</guid>
      <description>.NET 7 在今年 11 月发布了，带来了几百页的性能提升和大量的新特性，其中很多新特性都让人印象深刻。本文就给大家带来直接使用 .NET SDK 构建 Docker 镜像的实战介绍。 在 .NET 7 中，</description>
    </item>
    
    <item>
      <title>Ant Design Blazor 0.11 - 0.12 中值得回味的新特性</title>
      <link>/posts/whats-new-in-antblazor-0.11-0.12/</link>
      <pubDate>Thu, 15 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/whats-new-in-antblazor-0.11-0.12/</guid>
      <description>&lt;p&gt;关注 Ant Design Blazor 的朋友应该就知道，我们分别在 6 月中和 8 月底发布了 0.11 和 0.12 两个版本，其中 0.11 积攒了大半年的新特性，而 0.12 则时隔一年多同步了 Antd 最新的样式，支持了 CSS 变量，所以很值得专门写一篇文章来介绍其中一些我觉得对项目发展影响很大的新特性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ant Design Blazor 1.0 正式版发布计划</title>
      <link>/posts/ant-blazor-1.0-roadmap/</link>
      <pubDate>Thu, 15 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/ant-blazor-1.0-roadmap/</guid>
      <description>&lt;p&gt;大家好，感谢大家两年来对 AntDesign Blazor 的支持。我们项目已经发展了两年，组件基本完成了 Antd 所有功能的 Blazor 实现，甚至在有些组件上（如Table、Form）增加了很多Blazor/C#的特性，也已经有很多个人和公司用在了生产环境和商业项目中。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>来自 .NET 基金会的来信 —— 为 .NET 20周年庆祝活动做好准备</title>
      <link>/posts/get-ready-for-the-net-20th-anniversary-celebration/</link>
      <pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/get-ready-for-the-net-20th-anniversary-celebration/</guid>
      <description>作为 .NET 基金会的成员和.NET的朋友，我们认为你会想知道这个庆典。</description>
    </item>
    
    <item>
      <title>Ant Design Blazor 组件库的路由复用多标签页介绍</title>
      <link>/posts/implement-reuse-tabs-using-antblazor/</link>
      <pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/implement-reuse-tabs-using-antblazor/</guid>
      <description>&lt;p&gt;最近，在 Ant Design Blazor 组件库中实现多标签页组件的呼声日益高涨。于是，我利用周末时间，结合 Blazor 内置路由组件实现了基于 &lt;code&gt;Tabs&lt;/code&gt; 组件的 &lt;code&gt;ReuseTabs&lt;/code&gt; 组件。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Blazor 面试 18 问</title>
      <link>/posts/blazor-interview-questions/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/blazor-interview-questions/</guid>
      <description>Blazor 是一个免费的、开源的、跨平台的 Web 框架。本文以面试问答的形式，介绍了 Blazor 中的一些主要概念。</description>
    </item>
    
    <item>
      <title>ASP.NET Core 在 .NET 6 Preview 2 中的更新</title>
      <link>/posts/asp-net-core-updates-in-net-6-preview-2/</link>
      <pubDate>Sun, 14 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/asp-net-core-updates-in-net-6-preview-2/</guid>
      <description>&lt;p&gt;.NET 6 预览版 2 现已推出！快来看看那些让人激动不已的新东西！&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
